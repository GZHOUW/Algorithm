'''
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def buildTree(self, inorder, postorder):
        # Take the last element in postorder as root, find the position of the root in the inorder array; then locate the range for left sub-tree and right sub-tree and do recursion.
        if not inorder or not postorder:
            return None
        
        root = TreeNode(postorder.pop()) # root is always the last element of postorder
        rootIdx = inorder.index(root.val) # the index of root in inorder array

        # the right of rootIdx in inorder array corresponds to the right subtree of root
        root.right = self.buildTree(inorder[rootIdx+1:], postorder)
        
        # the left of rootIdx in inorder array corresponds to the left subtree of root
        root.left = self.buildTree(inorder[:rootIdx], postorder)

        return root
